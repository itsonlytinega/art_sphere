import pygame
import random

# Initialize Pygame
pygame.init()

# Screen settings
width, height = 800, 600
screen = pygame.display.set_mode((width, height))
clock = pygame.time.Clock()

# Colors
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLACK = (0, 0, 0)

# Sphere settings
sphere_radius = 15
sphere_x = width // 2
sphere_y = height - 100
sphere_speed_x = 10  # Horizontal movement speed

# Game settings
obstacle_speed = 5
obstacles = []
score = 0
game_speed = 5
increase_interval = 10  # Increase speed every 10 points

# Perspective settings
grid_color = GREEN
line_spacing = 40

# Font
font = pygame.font.SysFont(None, 36)

# Function to draw the grid with perspective effect
def draw_grid():
    for i in range(0, width, line_spacing):
        pygame.draw.line(screen, grid_color, (i, 0), (i, height), 1)
    for j in range(0, height, line_spacing):
        pygame.draw.line(screen, grid_color, (0, j), (width, j), 1)

# Function to create a new obstacle
def create_obstacle():
    x = random.randint(0, width - line_spacing)
    obstacle_width = line_spacing
    obstacle_height = line_spacing * 2
    obstacles.append({'x': x, 'y': 0, 'width': obstacle_width, 'height': obstacle_height})

# Function to display the score
def display_score():
    score_text = font.render(f'Score: {score}', True, WHITE)
    screen.blit(score_text, (10, 10))

# Function to check for collision
def check_collision():
    for obstacle in obstacles:
        if (sphere_x - sphere_radius < obstacle['x'] + obstacle['width'] and
            sphere_x + sphere_radius > obstacle['x'] and
            sphere_y - sphere_radius < obstacle['y'] + obstacle['height'] and
            sphere_y + sphere_radius > obstacle['y']):
            return True
    return False

# Reset game function
def reset_game():
    global sphere_x, obstacles, score, game_speed, game_over
    sphere_x = width // 2
     obstacles.clear()
    score = 0
    game_speed = 5
    game_over = False

# Game loop
running = True
game_over = False
paused = False

while running:
    screen.fill(BLACK)

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not game_over:  # Toggle pause
                paused = not paused
            elif event.key == pygame.K_ESCAPE and game_over:  # Restart on game over
                reset_game()

    # If game is paused, skip the game logic
    if not paused and not game_over:
        draw_grid()
        display_score()

        # Move the sphere left or right
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and sphere_x - sphere_radius > 0:
            sphere_x -= sphere_speed_x
        if keys[pygame.K_RIGHT] and sphere_x + sphere_radius < width:
            sphere_x += sphere_speed_x

        # Add new obstacles
        if random.randint(1, 30) == 1:
            create_obstacle()

        # Move obstacles down
        for obstacle in obstacles[:]:
            obstacle['y'] += game_speed
            pygame.draw.rect(screen, RED, (obstacle['x'], obstacle['y'], obstacle['width'], obstacle['height']))

            # Remove obstacles that have gone off screen and increase score
            if obstacle['y'] > height:
                obstacles.remove(obstacle)
                score += 1
                if score % increase_interval == 0:
                    game_speed += 1

        # Check for collision
        if check_collision():
            game_over = True

        # Draw the sphere as a 3D-look circle
        pygame.draw.circle(screen, WHITE, (sphere_x, sphere_y), sphere_radius)

    elif game_over:
        # Display the "Game Over" screen
        screen.fill(BLACK)
        game_over_text = font.render("GAME OVER", True, RED)
        score_text = font.render(f"Score: {score}", True, WHITE)
        restart_text = font.render("Press ESC to Restart", True, WHITE)
        screen.blit(game_over_text, (width // 2 - game_over_text.get_width() // 2, height // 2 - 50))
        screen.blit(score_text, (width // 2 - score_text.get_width() // 2, height // 2))
        screen.blit(restart_text, (width // 2 - restart_text.get_width() // 2, height // 2 + 50))

    elif paused:
        # Display the "Paused" message
        pause_text = font.render("Paused - Press SPACE to Resume", True, WHITE)
        screen.blit(pause_text, (width // 2 - pause_text.get_width() // 2, height // 2))

    pygame.display.flip()
    clock.tick(30)

pygame.quit()
